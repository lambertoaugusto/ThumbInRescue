<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = global.alturaTela;
randomize();
//Variáveis das engrenagens e pontuação
score = 0;// escore inicia com zero.
globalvar multiplicador;
globalvar scoreCounter;
global.multiplicador = 1;// define o multiplicador com valor inicial igual a 1;
global.scoreCounter = 0;// conta a quantidade de engrenagens até colidir.


//controle do fechar janela
globalvar janelaFecha;
global.janelaFecha = "";

//flag q indica que o path inicial do player terminou
globalvar endOfPath;
global.endOfPath = false;

//variáveis relacionadas a ações na tela
globalvar gameOver; //variável que verifica se terminou o jogo
global.gameOver = -1;

globalvar velocidadeRoom; //variável que armazena a velocidade do jogo
global.velocidadeRoom = 0;

globalvar velocidadeBackground;
global.velocidadeBackground = global.velocidadeRoom;

//variável que indica qual tema atual está aparecendo (mod 3)
globalvar temaAtual;
ini_open('SETTINGS.ini');
t = ini_read_string('LOJA','tema_status','');
ini_close();
if(t = ''){
    temaAtual = 0;
}
else if(t == 'ruinas'){
    temaAtual = irandom(1);
}
else if(t == 'mina'){
    temaAtual = irandom(2);
}
else if(t == 'vulcao'){
    temaAtual = irandom(3);
}

globalvar transicao;
transicao = true;

//variável que conta a quantidade de background 1 já foram criadas para auxiliar no término da transicao
//globalvar countBack;
//countBack = 0;

//variável que auxilia no momento em os objetos (lateral, obstaculos) devem modificar conforme o tema
globalvar modificarObjetos;
global.modificarObjetos = true;

globalvar mudouTema;
global.mudouTema = false;


//variável que armazena os temas
globalvar tema;

tema[0] = 'cristais';
tema[1] = 'ruinas';
tema[2] = 'mina';
tema[3] = 'vulcao';

//temas iniciais
ListasObjLat('transicao');
ListaObstIndest('transicao');
ListaObstDest(tema[temaAtual]);

//muda o tema na quantidade de tempoMudarTema segundos
//alarm[1] = tempoMudarTema*room_speed;

//**********************Evento que faz o controle dos objetos na tela*************************************

//Configurando a view.

setView();

/////////////Criando o player//////////////////
//instance_create(room_width/2,-10,playerEndless_obj);
instance_create(room_width/2,320,playerEndless_obj);

///////definindo o background//////////////////
//instance_create(LimiteEsq,0,obj_backgroundInicial);
instance_create(LimiteEsq,y,obj_backgroundInicial);

//background(tema[temaAtual]);

//****************controle dos obstáculos laterais da tela************************************************

//instance_create(0, 0, obj_tela);
instance_create(0, y, obj_tela);

//*************************fim do controle dos obstáculos laterais da tela***********************************

//*************Início do controle dos sets dos obstáculos que aparecem no meio da tela***********************
criouProx = false;
criouBack = false;
//globalvar listaObstaculos;

globalvar tempoTeste;

//variavel que cria e armazena o index das fontes criadas a partir de sprites

globalvar fonteNum;
global.fonteNum = font_add_sprite(fonte_num,ord("0"),true,3);

globalvar fonteDist;
global.fonteDist = font_add_sprite(fonte_dist,ord("0"),true,3);

globalvar fonteEng;
global.fonteEng = font_add_sprite(fonte_eng,ord("0"),true,3);

globalvar fonteLetras;
global.fonteLetras = font_add_sprite(fonte_letras,ord("0"),true,3);

/////////////////////definindo o som///////////////////
musica = 'menu';
musicPlaying = -1;
fadingTime = 0;
audio_listener_position(0,0,0);
audio_channel_num(60);
audio_master_gain(1);    

globalvar fec;
globalvar status_som;
ini_open('SETTINGS.ini');
global.status_som = ini_read_string('SOM','status','on');
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>criarEngrenagens(irandom(room_width),room_height, irandom(20),irandom(1));
alarm[0] = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.velocidadeBackground = (global.velocidadeRoom/5);



ini_open('SETTINGS.ini');
global.status_som = ini_read_string('SOM','status','on');
ini_close();
if(global.status_som == 'on'){
audio_master_gain(1);
sons();
}
else{
    audio_master_gain(0);
}

//funções que desativam e ativam objetos q estão sendo visualizados, melhorando a performance do jogo
//instance_deactivate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], false, true);
//instance_activate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], true);



if(!global.entradaTela &amp;&amp; !criouBack){
    global.transicao = false;
    instance_create(LimiteEsq,0,obj_background0);
    instance_create(LimiteEsq,0,obj_background1);
    criouBack = true;
}

if(global.transicao){
    ListasObjLat('transicao');
    ListaObstIndest('transicao');
    ListaObstDest(tema[temaAtual]);
}
else{
    if(global.modificarObjetos){
        ListasObjLat(tema[temaAtual]);
        ListaObstIndest(tema[temaAtual]);
        ListaObstDest(tema[temaAtual]);
    }
}

//setViewAntigo
var aspectoTela;
aspectoTela = (display_get_width()/display_get_height());
if(aspectoTela != global.aspectoTelaAnterior){
                      setView();
                      }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
