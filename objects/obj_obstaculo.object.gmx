<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//vspeed = global.velocidadeRoom;

quebravel = false;
//espaço minimo entre os blocos.
espacoMinimo = playerEndless_obj.sprite_width + 10;
//espaço minimo diagonal entre os blocos
espacoDiagonal = sqr(power(sprite_height,2)+power(sprite_width,2)) + 30;

var X = 0;
var Y = 0;
var contador = 0;

distanciaMinimaEsquerda = 0;
distanciaMinimaDireita = 0;
distanciaMinimaDiagEsquerda = 0;
distanciaMinimaDiagDireita = 0;


//definindo sprite.
randomize();
obsRandom = irandom(9);
if(listaObstaculos[obsRandom]!=false){
    sprite_index = listaObstaculos[obsRandom];

do{
    randomize();
    x = irandom_range(LimiteEsq, LimiteDir - sprite_width);
    y = irandom_range(global.alturaTela,global.alturaTela*2-sprite_height);     
     
    with(instance_create(x+sprite_width,y,objPoint)){
        move_outside_all(0,-1);
        move_contact_all(0,-1);
        X = x;
        Y = y;
        instance_destroy();
    }
    
    distanciaMinimaDireita = point_distance(x + sprite_width, y, X, Y);
    
    with(instance_create(x,y,objPoint)){
        move_outside_all(180,-1);
        move_contact_all(180,-1);
        X = x;
        Y = y;
        instance_destroy();
    }
    
    distanciaMinimaEsquerda = point_distance(x,y, X, Y);
        
    if(distanciaMinimaDireita &gt;= espacoMinimo &amp;&amp; distanciaMinimaEsquerda &gt;= espacoMinimo){         
    
        
         with(instance_create(x+sprite_width,y+sprite_yoffset,objPoint)){
            move_outside_all(0,-1);
            move_contact_all(0,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaDireita = point_distance(x+sprite_width,y+sprite_yoffset, X, Y);
    
         with(instance_create(x,y+sprite_yoffset,objPoint)){
            move_outside_all(180,-1);
            move_contact_all(180,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaEsquerda = point_distance(x,y+sprite_yoffset, X, Y);
    
    }// fim do if.
    
        
    if(distanciaMinimaDireita &gt;= espacoMinimo &amp;&amp; distanciaMinimaEsquerda &gt;= espacoMinimo){         

        
         with(instance_create(x+sprite_width,y+sprite_height,objPoint)){
            move_outside_all(0,-1);
            move_contact_all(0,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaDireita = point_distance(x+sprite_width,y+sprite_height, X, Y);
    
         with(instance_create(x,y+sprite_height,objPoint)){
            move_outside_all(180,-1);
            move_contact_all(180,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaEsquerda = point_distance(x,y+sprite_height, X, Y);
         
             
    }// fim do if.    
   
    
    if(distanciaMinimaDireita &gt;= espacoMinimo &amp;&amp; distanciaMinimaEsquerda &gt;= espacoMinimo){
        with(instance_create(x+sprite_width,y,objPoint)){
            move_outside_all(45,-1);
            move_contact_all(45,-1);
            X = x;
            Y = y;
            instance_destroy();
        }
        
        distanciaMinimaDiagDireita = point_distance(x + sprite_width, y, X, Y);
        
        with(instance_create(x,y,objPoint)){
            move_outside_all(135,-1);
            move_contact_all(135,-1);
            X = x;
            Y = y;
            instance_destroy();
        }
        
        distanciaMinimaDiagEsquerda = point_distance(x,y, X, Y);        
        
    }//fim do if

    if(distanciaMinimaDiagDireita &gt;= espacoDiagonal &amp;&amp; distanciaMinimaDiagEsquerda &gt;= espacoDiagonal){         
        
         with(instance_create(x+sprite_width,y+sprite_height,objPoint)){
            move_outside_all(315,-1);
            move_contact_all(315,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaDiagDireita = point_distance(x+sprite_width,y+sprite_height, X, Y);
    
         with(instance_create(x,y+sprite_height,objPoint)){
            move_outside_all(225,-1);
            move_contact_all(225,-1);
            X = x;
            Y = y;
            instance_destroy();
         }
    
         distanciaMinimaDiagEsquerda = point_distance(x,y+sprite_height, X, Y);
         
             
    }// fim do if.

    
    contador++;

} until(!place_meeting(x,y,obj_blocoEsq) &amp;&amp;
      !place_meeting(x, y, obj_blocoDir) &amp;&amp;
      !place_meeting(x, y, obj_obstaculo) &amp;&amp;
      distanciaMinimaDireita &gt;= espacoMinimo &amp;&amp;
      distanciaMinimaEsquerda &gt;= espacoMinimo &amp;&amp;
      distanciaMinimaDiagDireita &gt;= espacoDiagonal&amp;&amp;
      distanciaMinimaDiagEsquerda &gt;= espacoDiagonal||
      contador &gt; 5);
      if(contador &gt;= 5)
        instance_destroy();
}//fim do if do sprite

*/
//vspeed = global.velocidadeRoom;

quebravel = false;
//espaço minimo entre os blocos.
espacoMinimo = playerEndless_obj.sprite_height + 10;

//espaço minimo diagonal entre os blocos
//*espacoDiagonal = sqr(power(sprite_height,2)+power(sprite_width,2)) + 30;

//var X = 0;
//var Y = 0;
var contador = 0;

//*distanciaMinimaEsquerda = 0;
//*distanciaMinimaDireita = 0;
//*distanciaMinimaDiagEsquerda = 0;
//*distanciaMinimaDiagDireita = 0;


//definindo sprite.
randomize();
obsRandom = irandom(9);
if(listaObstaculos[obsRandom]!=false){
    sprite_index = listaObstaculos[obsRandom];
    {
        do{
            randomize();
            x = irandom_range(LimiteEsq, LimiteDir - sprite_width);
            y = irandom_range(global.alturaTela,(global.alturaTela*2)-sprite_height);              
            contador++;    
        } 
        until(posicaoValida(false,espacoMinimo) || contador &gt;= 5);
    }
    
    if(contador &gt;= 5){        
        instance_destroy();
    }
}//fim do if do sprite
else{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed = global.velocidadeRoom;

if(y &lt;= (-1*sprite_get_height(listaObstaculos[obsRandom]))){
    instance_destroy();
}
if(gameOver==-1){
    if(global.nivelDash == 4 &amp;&amp; global.dashFlag){
        colidir_com_soft(obj_obstaculo,playerEndless_obj);
    }
    else{
        colidir_com_indestrutivel(obj_obstaculo,playerEndless_obj);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
